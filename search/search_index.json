{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"odsclient \u00b6 A nonofficial client for OpenDataSoft API. New: you can now use a local file cache ! Check it out below . New: stream-download huge datasets to csv files directly, and use tqdm progress bars ! odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets. Installing \u00b6 If you wish to install odsclient with all of its optional dependencies click , keyring and tqdm you can do it all at once (recommended): > pip install odsclient [ full ] For a minimal installation simply use: > pip install odsclient Optional dependencies description: tqdm is needed to display progress bars (if the ODS server supports providing progress information). keyring is the recommended backend to securely store your api keys in the operating system's credential manager, see below . click is used by odskeys , our little commandline helper to help you register your keys with keyring easily. Finally, if you wish to download datasets and get them directly converted as dataframes, you should also install pandas . This dependency is not automatically installed with pip install odsclient[full] , you have to install it separately. Usage \u00b6 1. Basics \u00b6 a- Downloading a \"flat\" dataset \u00b6 The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset dataset_id = \"respect-des-delais-dacheminement-courrier\" csv_str = get_whole_dataset ( dataset_id , platform_id = 'public' ) print ( csv_str ) yields Cat\u00e9gorie;Objectif ou R\u00e9alisation;Pourcentage;Annee Lettre prioritaire J + 1;objectif;0.84;2009 Lettre recommand\u00e9e J + 2;r\u00e9alisation;0.9460000000000001;2014 Courrier industriel J + 2;objectif;0.9500000000000001;2009 Colissimo guichet J + 2;r\u00e9alisation;0.877;2009 ... In addition: you might wish to display a progress bar using tqdm=True ( pip install tqdm first). Note that on some ODS platforms the HTTP Header Content-Length is not set, so you might only see a download rate, not an actual progress bar. you might wish to download directly the dataset to a csv using streaming and without loading it in memory. This can be achieved by setting to_path=<path> where the path can be a string or a pathlib.Path instance. Finally, if you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe dataset_id = \"respect-des-delais-dacheminement-courrier\" df = get_whole_dataframe ( dataset_id , platform_id = 'public' ) print ( df . head ()) yields Cat\u00e9gorie Objectif ou R\u00e9alisation Pourcentage Annee 0 Lettre prioritaire J + 1 objectif 0.840 2009 1 Lettre recommand\u00e9e J + 2 r\u00e9alisation 0.946 2014 2 Courrier industriel J + 2 objectif 0.950 2009 3 Colissimo guichet J + 2 r\u00e9alisation 0.877 2009 4 Lettre verte J + 2 r\u00e9alisation 0.932 2014 b- Using another ODS platform \u00b6 By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default: https://public.opendatasoft.com Custom `platform_id`: https://my_ods.opendatasoft.com Custom `base_url`: https://my_ods_server.com Note that any trailing slash is automatically removed from custom base urls. c- Declaring an API key \u00b6 Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are several ways that you can use to specify an api key to use for your ODS interactions. explicit, temporary \u00b6 If your need is a \"quick and dirty\" test, you can use direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary workaround, and should never be committed with the source code. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" ) interactive \u00b6 If your application tolerates user interaction through the terminal, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ()) permanent \u00b6 In all other cases, we recommend that you write apikey-agnostic code such as the one below: csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) In that case, odsclient will try several strategies to find an api key: first it will look for an ods.apikey text file containing the api key. The file should obviously not be committed with the source code (use .gitignore !). This is not the most secure solution, as malicious programs on your computer may have access to the file, and moreover you may commit it by accident (human error prone). You can override the default file path with the apikey_filepath=... argument. then if keyring is installed ( pip install keyring ), it will check if there is an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault ( Windows Credential Locker, macOS Keychain, Ubuntu SecretService, GNOME Keyring, etc. ). This is the most secure method available, it is therefore highly recommended . You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring with the odskeys commandline utility , through the OS interface, or with the store_apikey_in_keyring / get_apikey_from_keyring / remove_apikey_from_keyring python API provided in odsclient . finally it looks for an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be <platform_id> , <base_url> , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is not the most secure solution because malicious programs can access the OS environment variables ; however it should be preferred over the file-based method as it is not human error-prone. Besides it can be handy for continuous integration jobs. If you wish to force usage of an api key (and prevent any ODS query to be made if none is found), you may wish to set enforce_apikey=True : csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , enforce_apikey = True # raise if no apikey is found ) If no api key is found, the above yields: odsclient.core.NoODSAPIKeyFoundError: ODS API key file not found, while it is marked as mandatory for this call (`enforce_apikey=True`). It should either be put in a text file at path 'ods.apikey', or in the `ODS_APIKEY` OS environment variable, or (recommended, most secure) in the local `keyring`. See documentation for details: https://smarie.github.io/python-odsclient/#c-declaring-an-api-key. Note that you can generate an API key on this web page: [...]. This can be handy if you wish your users to see a quick help at first call reminding them on the various ways to provide an api key. Finally, for debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" )) d- Pushing a dataset (Realtime API) \u00b6 Pushing new data to the Realtime API of ODS works through the push_dataset_realtime function. In order to push data you need to get a pushkey for your dataset at the Sources tab on the dataset definition page in order to get this work. The pushkey is independent from your API key. Passing your API key as the pushkey won't work. You can push the data as CSV or as a pandas dataframe, as shown below. Pushing a CSV \u00b6 The simplest way to push a dataset is to provide a string following the CSV format: from odsclient import ODSClient o = ODSClient ( '<<ODS-platform-id>>' ) csv = \"\"\"column_1,column_2 1,2 3,4 \"\"\" res = o . push_dataset_realtime ( '<<dataset-id>>' , csv , format = 'csv' , csv_separator = ',' , push_key = '<<your-push-key>>' ) Pushing a DataFrame \u00b6 If you have pandas installed you can also push a DataFrame directly: import pandas as pd from odsclient import ODSClient o = ODSClient ( '<<ODS-platform-id>>' ) dataset = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 4 }, ] p_df = pd . DataFrame ( dataset ) res = o . push_dataset_realtime ( \"<<dataset-id>>\" , p_df , format = 'pandas' , push_key = '<<your-push-key>>' ) See API reference for details. 2. Advanced \u00b6 a. Caching \u00b6 If you use some datasets often, you might not wish to make a query to the ODS platform everytime your code runs. To avoid useless calls, you can now use the file_cache argument, in any of the dataset retrieval methods. It can either receive a path-like object indicating the folder to use as the cache root, or a boolean ( True means .odsclient/ , False means cache disabled). csv_str = get_whole_dataset ( \"opendatasoft-offices\" , file_cache = True ) You should see the following file created: The next usage of this dataset (through get_whole_dataset or through get_whole_dataframe ) will not make a network call and will instead reuse this local file. In addition you have access to two utility methods : clean_cache cleans parts or all of the cache. Note that this is equivalent to removing the folders/files by hand, so you can do this too. get_cached_dataset_entry or <ODSClient>.get_cached_dataset_entry returns a CacheEntry object representing the cached file. This object contains its path and provides handy methods to read and write the file. All files in the cache are converted to utf-8 encoding In order to avoid storing encoding information in the cache folder, odsclient converts all downloaded datasets to utf-8 encoding before storing them in the cache. This should have no side-effect for you except if you try to read the cached file directly without using the CacheEntry.read() method, or if your dataset contains old/alternative forms of east asian kanji that cannot be represented with unicode encodings. b. Custom requests.Session \u00b6 By default a new requests.Session object is created for each instance of ODSClient . When this ODSClient is garbaged out, the requests.Session object is closed to avoid leaving Sockets hanging (see #27 ). You can provide a custom requests.Session to the constructor (or to any of the shortcuts) with the requests_session argument. In which case it will not be closed by default. You can change this behaviour by setting auto_close_session=True . See API reference . Main features / benefits \u00b6 Simple access to ODS API to retrive a whole dataset as text (csv) or dataframe Support for many methods to define an api key, independently of the source code: different users may use different methods (env variable, api key file, keyring) while using the same odsclient code. Easy-to-use caching capabilities on the local disk. See Also \u00b6 This library was inspired by: azmlclient keyring Work in progress: using KeePass as a keyring backend. Here and here Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-odsclient","title":"Home"},{"location":"#odsclient","text":"A nonofficial client for OpenDataSoft API. New: you can now use a local file cache ! Check it out below . New: stream-download huge datasets to csv files directly, and use tqdm progress bars ! odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets.","title":"odsclient"},{"location":"#installing","text":"If you wish to install odsclient with all of its optional dependencies click , keyring and tqdm you can do it all at once (recommended): > pip install odsclient [ full ] For a minimal installation simply use: > pip install odsclient Optional dependencies description: tqdm is needed to display progress bars (if the ODS server supports providing progress information). keyring is the recommended backend to securely store your api keys in the operating system's credential manager, see below . click is used by odskeys , our little commandline helper to help you register your keys with keyring easily. Finally, if you wish to download datasets and get them directly converted as dataframes, you should also install pandas . This dependency is not automatically installed with pip install odsclient[full] , you have to install it separately.","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-basics","text":"","title":"1. Basics"},{"location":"#a-downloading-a-flat-dataset","text":"The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset dataset_id = \"respect-des-delais-dacheminement-courrier\" csv_str = get_whole_dataset ( dataset_id , platform_id = 'public' ) print ( csv_str ) yields Cat\u00e9gorie;Objectif ou R\u00e9alisation;Pourcentage;Annee Lettre prioritaire J + 1;objectif;0.84;2009 Lettre recommand\u00e9e J + 2;r\u00e9alisation;0.9460000000000001;2014 Courrier industriel J + 2;objectif;0.9500000000000001;2009 Colissimo guichet J + 2;r\u00e9alisation;0.877;2009 ... In addition: you might wish to display a progress bar using tqdm=True ( pip install tqdm first). Note that on some ODS platforms the HTTP Header Content-Length is not set, so you might only see a download rate, not an actual progress bar. you might wish to download directly the dataset to a csv using streaming and without loading it in memory. This can be achieved by setting to_path=<path> where the path can be a string or a pathlib.Path instance. Finally, if you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe dataset_id = \"respect-des-delais-dacheminement-courrier\" df = get_whole_dataframe ( dataset_id , platform_id = 'public' ) print ( df . head ()) yields Cat\u00e9gorie Objectif ou R\u00e9alisation Pourcentage Annee 0 Lettre prioritaire J + 1 objectif 0.840 2009 1 Lettre recommand\u00e9e J + 2 r\u00e9alisation 0.946 2014 2 Courrier industriel J + 2 objectif 0.950 2009 3 Colissimo guichet J + 2 r\u00e9alisation 0.877 2009 4 Lettre verte J + 2 r\u00e9alisation 0.932 2014","title":"a- Downloading a \"flat\" dataset"},{"location":"#b-using-another-ods-platform","text":"By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default: https://public.opendatasoft.com Custom `platform_id`: https://my_ods.opendatasoft.com Custom `base_url`: https://my_ods_server.com Note that any trailing slash is automatically removed from custom base urls.","title":"b- Using another ODS platform"},{"location":"#c-declaring-an-api-key","text":"Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are several ways that you can use to specify an api key to use for your ODS interactions.","title":"c- Declaring an API key"},{"location":"#explicit-temporary","text":"If your need is a \"quick and dirty\" test, you can use direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary workaround, and should never be committed with the source code. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" )","title":"explicit, temporary"},{"location":"#interactive","text":"If your application tolerates user interaction through the terminal, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ())","title":"interactive"},{"location":"#permanent","text":"In all other cases, we recommend that you write apikey-agnostic code such as the one below: csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) In that case, odsclient will try several strategies to find an api key: first it will look for an ods.apikey text file containing the api key. The file should obviously not be committed with the source code (use .gitignore !). This is not the most secure solution, as malicious programs on your computer may have access to the file, and moreover you may commit it by accident (human error prone). You can override the default file path with the apikey_filepath=... argument. then if keyring is installed ( pip install keyring ), it will check if there is an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault ( Windows Credential Locker, macOS Keychain, Ubuntu SecretService, GNOME Keyring, etc. ). This is the most secure method available, it is therefore highly recommended . You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring with the odskeys commandline utility , through the OS interface, or with the store_apikey_in_keyring / get_apikey_from_keyring / remove_apikey_from_keyring python API provided in odsclient . finally it looks for an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be <platform_id> , <base_url> , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is not the most secure solution because malicious programs can access the OS environment variables ; however it should be preferred over the file-based method as it is not human error-prone. Besides it can be handy for continuous integration jobs. If you wish to force usage of an api key (and prevent any ODS query to be made if none is found), you may wish to set enforce_apikey=True : csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , enforce_apikey = True # raise if no apikey is found ) If no api key is found, the above yields: odsclient.core.NoODSAPIKeyFoundError: ODS API key file not found, while it is marked as mandatory for this call (`enforce_apikey=True`). It should either be put in a text file at path 'ods.apikey', or in the `ODS_APIKEY` OS environment variable, or (recommended, most secure) in the local `keyring`. See documentation for details: https://smarie.github.io/python-odsclient/#c-declaring-an-api-key. Note that you can generate an API key on this web page: [...]. This can be handy if you wish your users to see a quick help at first call reminding them on the various ways to provide an api key. Finally, for debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" ))","title":"permanent"},{"location":"#d-pushing-a-dataset-realtime-api","text":"Pushing new data to the Realtime API of ODS works through the push_dataset_realtime function. In order to push data you need to get a pushkey for your dataset at the Sources tab on the dataset definition page in order to get this work. The pushkey is independent from your API key. Passing your API key as the pushkey won't work. You can push the data as CSV or as a pandas dataframe, as shown below.","title":"d- Pushing a dataset (Realtime API)"},{"location":"#pushing-a-csv","text":"The simplest way to push a dataset is to provide a string following the CSV format: from odsclient import ODSClient o = ODSClient ( '<<ODS-platform-id>>' ) csv = \"\"\"column_1,column_2 1,2 3,4 \"\"\" res = o . push_dataset_realtime ( '<<dataset-id>>' , csv , format = 'csv' , csv_separator = ',' , push_key = '<<your-push-key>>' )","title":"Pushing a CSV"},{"location":"#pushing-a-dataframe","text":"If you have pandas installed you can also push a DataFrame directly: import pandas as pd from odsclient import ODSClient o = ODSClient ( '<<ODS-platform-id>>' ) dataset = [ { 'a' : 1 , 'b' : 2 }, { 'a' : 3 , 'b' : 4 }, ] p_df = pd . DataFrame ( dataset ) res = o . push_dataset_realtime ( \"<<dataset-id>>\" , p_df , format = 'pandas' , push_key = '<<your-push-key>>' ) See API reference for details.","title":"Pushing a DataFrame"},{"location":"#2-advanced","text":"","title":"2. Advanced"},{"location":"#a-caching","text":"If you use some datasets often, you might not wish to make a query to the ODS platform everytime your code runs. To avoid useless calls, you can now use the file_cache argument, in any of the dataset retrieval methods. It can either receive a path-like object indicating the folder to use as the cache root, or a boolean ( True means .odsclient/ , False means cache disabled). csv_str = get_whole_dataset ( \"opendatasoft-offices\" , file_cache = True ) You should see the following file created: The next usage of this dataset (through get_whole_dataset or through get_whole_dataframe ) will not make a network call and will instead reuse this local file. In addition you have access to two utility methods : clean_cache cleans parts or all of the cache. Note that this is equivalent to removing the folders/files by hand, so you can do this too. get_cached_dataset_entry or <ODSClient>.get_cached_dataset_entry returns a CacheEntry object representing the cached file. This object contains its path and provides handy methods to read and write the file. All files in the cache are converted to utf-8 encoding In order to avoid storing encoding information in the cache folder, odsclient converts all downloaded datasets to utf-8 encoding before storing them in the cache. This should have no side-effect for you except if you try to read the cached file directly without using the CacheEntry.read() method, or if your dataset contains old/alternative forms of east asian kanji that cannot be represented with unicode encodings.","title":"a. Caching"},{"location":"#b-custom-requestssession","text":"By default a new requests.Session object is created for each instance of ODSClient . When this ODSClient is garbaged out, the requests.Session object is closed to avoid leaving Sockets hanging (see #27 ). You can provide a custom requests.Session to the constructor (or to any of the shortcuts) with the requests_session argument. In which case it will not be closed by default. You can change this behaviour by setting auto_close_session=True . See API reference .","title":"b. Custom requests.Session"},{"location":"#main-features-benefits","text":"Simple access to ODS API to retrive a whole dataset as text (csv) or dataframe Support for many methods to define an api key, independently of the source code: different users may use different methods (env variable, api key file, keyring) while using the same odsclient code. Easy-to-use caching capabilities on the local disk.","title":"Main features / benefits"},{"location":"#see-also","text":"This library was inspired by: azmlclient keyring Work in progress: using KeePass as a keyring backend. Here and here","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-odsclient","title":"Want to contribute ?"},{"location":"api_reference/","text":"API reference \u00b6 In general, help(symbol) will provide the latest up-to-date documentation. ODSClient \u00b6 An ODSClient is a client for a given OpenDataSoft (ODS) platform. By default the target platform base url is https://<platform_id>.opendatasoft.com with platform_id='public' . One can change either customize the platform id through the platform_id constructor argument, or the whole base url with base_url . A client instance offers methods to interact with the various ODS API. Currently three high-level methods are provided: * <client>.get_whole_dataset(dataset_id, ...) * <client>.get_whole_dataframe(dataset_id, ...) * <client>.push_dataset_realtime(dataset_id, ...) A file cache can be activated for the two get methods by setting file_cache to True or to a path-like (string or Path ) indicating a custom cache root path. True will use the default cache root folder .odsclient . <client>.get_cached_dataset_entry can be used to get a CacheEntry object representing the (possibly non-existing) cache entry for a given dataset. You can customize the requests.Session object used for the HTTPS transport using requests_session . If you do so, remember to close it yourself or to switch auto_close_session to True. A client is meant to use a single api key at a time, or none. You can force the api key to be mandatory using enforce_apikey=True . There are 4 ways to pass an api key, they are used in the following order: explicitly with the apikey argument through a text file containing the key. This file if present should be named ods.apikey (name can be changed using apikey_filepath , it does not make the file mandatory) if keyring is installed ( pip install keyring ), an apikey can be created as an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault (Windows Credential Locker, macOS Keychain, etc. This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring through the OS interface, with the odskeys commandline utility or with the <client>.store_apikey_in_keyring / <client>.get_apikey_from_keyring / <client>.remove_apikey_from_keyring methods. through the 'ODS_APIKEY' OS environment variable. It should either contain the key without quotes or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' For debugging purposes, you may wish to use <client>.get_apikey() to check if the api key that is actually used is the one you think you have configured through one of the above methods. Keep in mind that when you push a dataset to ODS the push API doesn't use the API keys provided. Instead, it uses a dataset-specific pushkey , which you can retrieve from the Sources tab of the ODS data management page. ODSClient ( platform_id = 'public' , # type: str base_url = None , # type: str enforce_apikey = False , # type: bool apikey = None , # type: str apikey_filepath = 'ods.apikey' , # type: Union[str, Path] use_keyring = True , # type: bool keyring_entries_username = KR_DEFAULT_USERNAME , # type: str requests_session = None , # type: Session auto_close_session = None # type: bool ): Parameters : platform_id : the ods platform id to use. This id is used to construct the base URL based on the pattern https:// .opendatasoft.com. Default is 'public' which leads to the base url https://public.opendatasoft.com base_url : an explicit base url to use instead of the one generated from platform_id enforce_apikey : an optional boolean indicating if an error should be raised if no apikey is found at all (not in the explicit argument, not in a file, environment variable, nor keyring) (default False ) apikey : an explicit api key as a string. apikey_filepath : the path that should be used to look for api keys on the file system. Such files are optional, other (safer) methods exist to pass the api key, see documentation for details. use_keyring : an optional boolean (default True ) specifying whether the keyring library should be used to lookup existing api keys. Keys should be stored using store_apikey_in_keyring() . keyring_entries_username : keyring stores secrets with a key made of a service id and a username. We use the base url for the service id, however the user name can be anything. By default we use a string: 'apikey_user'. requests_session : an optional Session object to use (from requests lib). If None is provided, a new Session will be used and deleted when this object is garbaged out. If a custom object is provided, you should close it yourself or switch auto_close_session to True explicitly. auto_close_session : an optional boolean indicating if (True, default) self.session should be closed when this object is garbaged out. By default this is None and means \" True if no custom requests_session is passed, else False \"). Turning this to False can leave hanging Sockets unclosed. Shortcuts \u00b6 The following shortcut functions provide the same level of functionality than ODSClient(...).<function_name>(...) . They can be handy if only one call to ODS is needed. from odsclient.shortcuts import ( get_whole_dataset , get_whole_dataframe , get_apikey , store_apikey_in_keyring , get_apikey_from_keyring , remove_apikey_from_keyring , push_dataset_realtime , get_cached_dataset_entry ) clean_cache \u00b6 TODO CacheEntry \u00b6 TODO","title":"API reference"},{"location":"api_reference/#api-reference","text":"In general, help(symbol) will provide the latest up-to-date documentation.","title":"API reference"},{"location":"api_reference/#odsclient","text":"An ODSClient is a client for a given OpenDataSoft (ODS) platform. By default the target platform base url is https://<platform_id>.opendatasoft.com with platform_id='public' . One can change either customize the platform id through the platform_id constructor argument, or the whole base url with base_url . A client instance offers methods to interact with the various ODS API. Currently three high-level methods are provided: * <client>.get_whole_dataset(dataset_id, ...) * <client>.get_whole_dataframe(dataset_id, ...) * <client>.push_dataset_realtime(dataset_id, ...) A file cache can be activated for the two get methods by setting file_cache to True or to a path-like (string or Path ) indicating a custom cache root path. True will use the default cache root folder .odsclient . <client>.get_cached_dataset_entry can be used to get a CacheEntry object representing the (possibly non-existing) cache entry for a given dataset. You can customize the requests.Session object used for the HTTPS transport using requests_session . If you do so, remember to close it yourself or to switch auto_close_session to True. A client is meant to use a single api key at a time, or none. You can force the api key to be mandatory using enforce_apikey=True . There are 4 ways to pass an api key, they are used in the following order: explicitly with the apikey argument through a text file containing the key. This file if present should be named ods.apikey (name can be changed using apikey_filepath , it does not make the file mandatory) if keyring is installed ( pip install keyring ), an apikey can be created as an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault (Windows Credential Locker, macOS Keychain, etc. This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring through the OS interface, with the odskeys commandline utility or with the <client>.store_apikey_in_keyring / <client>.get_apikey_from_keyring / <client>.remove_apikey_from_keyring methods. through the 'ODS_APIKEY' OS environment variable. It should either contain the key without quotes or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' For debugging purposes, you may wish to use <client>.get_apikey() to check if the api key that is actually used is the one you think you have configured through one of the above methods. Keep in mind that when you push a dataset to ODS the push API doesn't use the API keys provided. Instead, it uses a dataset-specific pushkey , which you can retrieve from the Sources tab of the ODS data management page. ODSClient ( platform_id = 'public' , # type: str base_url = None , # type: str enforce_apikey = False , # type: bool apikey = None , # type: str apikey_filepath = 'ods.apikey' , # type: Union[str, Path] use_keyring = True , # type: bool keyring_entries_username = KR_DEFAULT_USERNAME , # type: str requests_session = None , # type: Session auto_close_session = None # type: bool ): Parameters : platform_id : the ods platform id to use. This id is used to construct the base URL based on the pattern https:// .opendatasoft.com. Default is 'public' which leads to the base url https://public.opendatasoft.com base_url : an explicit base url to use instead of the one generated from platform_id enforce_apikey : an optional boolean indicating if an error should be raised if no apikey is found at all (not in the explicit argument, not in a file, environment variable, nor keyring) (default False ) apikey : an explicit api key as a string. apikey_filepath : the path that should be used to look for api keys on the file system. Such files are optional, other (safer) methods exist to pass the api key, see documentation for details. use_keyring : an optional boolean (default True ) specifying whether the keyring library should be used to lookup existing api keys. Keys should be stored using store_apikey_in_keyring() . keyring_entries_username : keyring stores secrets with a key made of a service id and a username. We use the base url for the service id, however the user name can be anything. By default we use a string: 'apikey_user'. requests_session : an optional Session object to use (from requests lib). If None is provided, a new Session will be used and deleted when this object is garbaged out. If a custom object is provided, you should close it yourself or switch auto_close_session to True explicitly. auto_close_session : an optional boolean indicating if (True, default) self.session should be closed when this object is garbaged out. By default this is None and means \" True if no custom requests_session is passed, else False \"). Turning this to False can leave hanging Sockets unclosed.","title":"ODSClient"},{"location":"api_reference/#shortcuts","text":"The following shortcut functions provide the same level of functionality than ODSClient(...).<function_name>(...) . They can be handy if only one call to ODS is needed. from odsclient.shortcuts import ( get_whole_dataset , get_whole_dataframe , get_apikey , store_apikey_in_keyring , get_apikey_from_keyring , remove_apikey_from_keyring , push_dataset_realtime , get_cached_dataset_entry )","title":"Shortcuts"},{"location":"api_reference/#clean_cache","text":"TODO","title":"clean_cache"},{"location":"api_reference/#cacheentry","text":"TODO","title":"CacheEntry"},{"location":"changelog/","text":"Changelog \u00b6 0.8.4 - Minor project changes \u00b6 Fixed the build issue with xunitparser by using genbadge . Fixed #28 . Changed the reference test dataset for the one advised by ODS. Fixed #23 0.8.3 - Minor fixes concerning import errors \u00b6 Improved odskeys error message when click is not installed. Now you can pip install odsclient[full] to install all optional dependencies at once. Fixes #26 No ImportError is raised by default if keyring is not installed. Instead a warning message is issued. Fixes #25 0.8.2 - Auto-closing requests.Session \u00b6 The underlying requests.Session is now automatically closed by ODSClient objects when they are garbaged out, to avoid leaving hanging Sockets around. This is not the case if a custom Session is passed. An advanced boolean parameter auto_close_session can be used to turn this feature off. Fixes #27 New CI/CD: github actions ! 0.8.1 - file_cache on get_whole_dataframe \u00b6 file_cache is now available on package-level get_whole_dataframe . Fixes #24 0.8.0 - New cache feature \u00b6 New cache functionality: a file_cache argument is available on most methods. The cache is by default located under .odsclient/ and contains utf-8 -encoded versions of the dataset files. New util methods clean_cache and get_cached_dataset_entry . Fixes #20 0.7.0 - New streaming-related features \u00b6 You can now display a progress bar using tqdm=True . Note that this requires the tqdm package to be installed, and since some ODS platforms do not return the Content-Length HTTP header, only the size and download rate might be displayed. Fixed #9 You can now stream a dataset directly to a file using to_path . Fixed #9 apikey_filepath can now be a pathlib.Path . 0.6.0 - New feature: push dataset \u00b6 New push_dataset_realtime client method and shortcut, to push a CSV string or a pandas dataframe to an ODS server through the Realtime API. PR #21 by @zoltanctoth , thanks ! 0.5.1 - better packaging \u00b6 packaging improvements: set the \"universal wheel\" flag to 1, and cleaned up the setup.py . In particular removed dependency to six for setup and added py.typed file. Removed tests folder from package. Fixes #19 0.5.0 - odskeys improvements \u00b6 New odskeys show command to open the OS GUI for keyring management. Fixed #18 odskeys get/set/remove now always print the complete url used for the keyring entry. Fixes #17 Improved documentation about api keys management. Fixed #15 0.4.0 - odskeys commandline \u00b6 New odskeys commandline utility to ease registration of api keys in keyring . Fixes #16 . Added a dedicated documentation page. Documentation improvements, in particular concerning api key registration. Filled the API reference documentation section 0.3.0 - api keys \u00b6 API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient 0.2.0 - datasets as pandas dataframes + misc. \u00b6 New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2 0.1.0 - First public version \u00b6 Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#084-minor-project-changes","text":"Fixed the build issue with xunitparser by using genbadge . Fixed #28 . Changed the reference test dataset for the one advised by ODS. Fixed #23","title":"0.8.4 - Minor project changes"},{"location":"changelog/#083-minor-fixes-concerning-import-errors","text":"Improved odskeys error message when click is not installed. Now you can pip install odsclient[full] to install all optional dependencies at once. Fixes #26 No ImportError is raised by default if keyring is not installed. Instead a warning message is issued. Fixes #25","title":"0.8.3 - Minor fixes concerning import errors"},{"location":"changelog/#082-auto-closing-requestssession","text":"The underlying requests.Session is now automatically closed by ODSClient objects when they are garbaged out, to avoid leaving hanging Sockets around. This is not the case if a custom Session is passed. An advanced boolean parameter auto_close_session can be used to turn this feature off. Fixes #27 New CI/CD: github actions !","title":"0.8.2 - Auto-closing requests.Session"},{"location":"changelog/#081-file_cache-on-get_whole_dataframe","text":"file_cache is now available on package-level get_whole_dataframe . Fixes #24","title":"0.8.1 - file_cache on get_whole_dataframe"},{"location":"changelog/#080-new-cache-feature","text":"New cache functionality: a file_cache argument is available on most methods. The cache is by default located under .odsclient/ and contains utf-8 -encoded versions of the dataset files. New util methods clean_cache and get_cached_dataset_entry . Fixes #20","title":"0.8.0 - New cache feature"},{"location":"changelog/#070-new-streaming-related-features","text":"You can now display a progress bar using tqdm=True . Note that this requires the tqdm package to be installed, and since some ODS platforms do not return the Content-Length HTTP header, only the size and download rate might be displayed. Fixed #9 You can now stream a dataset directly to a file using to_path . Fixed #9 apikey_filepath can now be a pathlib.Path .","title":"0.7.0 - New streaming-related features"},{"location":"changelog/#060-new-feature-push-dataset","text":"New push_dataset_realtime client method and shortcut, to push a CSV string or a pandas dataframe to an ODS server through the Realtime API. PR #21 by @zoltanctoth , thanks !","title":"0.6.0 - New feature: push dataset"},{"location":"changelog/#051-better-packaging","text":"packaging improvements: set the \"universal wheel\" flag to 1, and cleaned up the setup.py . In particular removed dependency to six for setup and added py.typed file. Removed tests folder from package. Fixes #19","title":"0.5.1 - better packaging"},{"location":"changelog/#050-odskeys-improvements","text":"New odskeys show command to open the OS GUI for keyring management. Fixed #18 odskeys get/set/remove now always print the complete url used for the keyring entry. Fixes #17 Improved documentation about api keys management. Fixed #15","title":"0.5.0 - odskeys improvements"},{"location":"changelog/#040-odskeys-commandline","text":"New odskeys commandline utility to ease registration of api keys in keyring . Fixes #16 . Added a dedicated documentation page. Documentation improvements, in particular concerning api key registration. Filled the API reference documentation section","title":"0.4.0 - odskeys commandline"},{"location":"changelog/#030-api-keys","text":"API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient","title":"0.3.0 -  api keys"},{"location":"changelog/#020-datasets-as-pandas-dataframes-misc","text":"New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2","title":"0.2.0 - datasets as pandas dataframes + misc."},{"location":"changelog/#010-first-public-version","text":"Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"0.1.0 - First public version"},{"location":"long_description/","text":"python-odsclient \u00b6 A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"},{"location":"long_description/#python-odsclient","text":"A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"},{"location":"odskey/","text":"odskey commandline utility \u00b6 Registering an api key in your OS' vault should not be a pain. Although keyring comes with a handy commandline utility already, since in odsclient we use a specific hardcoded pattern ( service_name=<base_url>, username='apikey_user', password=<apikey> ), we provide an even easier commandline for you named odskey : Usage \u00b6 Usage: odskeys [OPTIONS] COMMAND [ARGS]... Commandline utility to get/set/remove api keys from the OS keyring using the `keyring` library. To get help on each command use: odskeys <cmd> --help Options: --help Show this message and exit. Commands: get Looks up an ODS apikey entry in the keyring. remove Removes an ODS apikey entry from the keyring. set Creates an ODS apikey entry in the keyring. show Shows the OS credentials manager associated with current keyring... For example: >>> odskeys get -b https://myodsplatform.com/ No api key registered for platform url 'https://myodsplatform.com/' >>> odskeys set -b https://myodsplatform.com/ Please enter your api key: ... >>> odskeys get -b https://myodsplatform.com/ Api key found for platform url 'https://myodsplatform.com/': ... >>> odskey remove -b https://myodsplatform.com/ Api key removed successfully for platform url 'https://myodsplatform.com/' Optional management gui \u00b6 For some keyring backends there is an OS graphical user interface available, where you can see the inserted credentials. odskeys show opens this GUI if available. This section is work in progress - if your system configuration is not supported do not hesitate to open a ticket ! Windows - Credentials Manager \u00b6 On Windows (tested on windows 10), odskeys show yields the configuration panel management interface: odskeys show --alt 1 yields the alternate legacy interface: MacOS - Keychain \u00b6 TODO - contributions appreciated Linux Ubuntu - SecretService \u00b6 TODO - contributions appreciated","title":"odskey command"},{"location":"odskey/#odskey-commandline-utility","text":"Registering an api key in your OS' vault should not be a pain. Although keyring comes with a handy commandline utility already, since in odsclient we use a specific hardcoded pattern ( service_name=<base_url>, username='apikey_user', password=<apikey> ), we provide an even easier commandline for you named odskey :","title":"odskey commandline utility"},{"location":"odskey/#usage","text":"Usage: odskeys [OPTIONS] COMMAND [ARGS]... Commandline utility to get/set/remove api keys from the OS keyring using the `keyring` library. To get help on each command use: odskeys <cmd> --help Options: --help Show this message and exit. Commands: get Looks up an ODS apikey entry in the keyring. remove Removes an ODS apikey entry from the keyring. set Creates an ODS apikey entry in the keyring. show Shows the OS credentials manager associated with current keyring... For example: >>> odskeys get -b https://myodsplatform.com/ No api key registered for platform url 'https://myodsplatform.com/' >>> odskeys set -b https://myodsplatform.com/ Please enter your api key: ... >>> odskeys get -b https://myodsplatform.com/ Api key found for platform url 'https://myodsplatform.com/': ... >>> odskey remove -b https://myodsplatform.com/ Api key removed successfully for platform url 'https://myodsplatform.com/'","title":"Usage"},{"location":"odskey/#optional-management-gui","text":"For some keyring backends there is an OS graphical user interface available, where you can see the inserted credentials. odskeys show opens this GUI if available. This section is work in progress - if your system configuration is not supported do not hesitate to open a ticket !","title":"Optional management gui"},{"location":"odskey/#windows-credentials-manager","text":"On Windows (tested on windows 10), odskeys show yields the configuration panel management interface: odskeys show --alt 1 yields the alternate legacy interface:","title":"Windows - Credentials Manager"},{"location":"odskey/#macos-keychain","text":"TODO - contributions appreciated","title":"MacOS - Keychain"},{"location":"odskey/#linux-ubuntu-secretservice","text":"TODO - contributions appreciated","title":"Linux Ubuntu - SecretService"}]}