{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"odsclient \u00b6 A nonofficial client for OpenDataSoft API. odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets. Installing \u00b6 > pip install odsclient If you wish to download datasets as dataframes, you should also install pandas . This is not mandatory, though. Finally, if you plan to use api keys, we recommend that you install keyring as it will help you store the critical api keys in your operating system's password vault. > pip install keyring Usage \u00b6 1. Basics \u00b6 a- Downloading a \"flat\" dataset \u00b6 The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( csv_str ) yields Year Ending;World output;World population;Per capita output 2012-12-31;3.03783837;1.39292748;1.62231324 1700-12-31;0.07352168;0.05783974;0.01567288 1820-12-31;0.51654477;0.44594248;0.07028884 1913-12-31;1.48929571;0.58556427;0.89847031 If you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe df = get_whole_dataframe ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( df ) yields Year Ending World output World population Per capita output 0 1820-12-31 0.516545 0.445942 0.070289 1 1913-12-31 1.489296 0.585564 0.898470 2 2012-12-31 3.037838 1.392927 1.622313 3 1700-12-31 0.073522 0.057840 0.015673 b- Using another ODS platform \u00b6 By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default : https : // public . opendatasoft . com Custom `platform_id` : https : // my_ods . opendatasoft . com Custom `base_url` : https : // my_ods_server . com Note that any trailing slash is automatically removed from custom base urls. c- Declaring an API key \u00b6 Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are four ways that you can use to specify an api key to use for your ODS interactions, listed below from less secure (top) to most secure (bottom): (1a) through direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary way to perform quick and dirty tests, and should never be committed with the source code. # 1a. providing an api key explicitly csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" ) (1b) if your application tolerates user interaction, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: # 1b. prompting the user for an api key at runtime from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ()) (2) through a text file containing the api key. This is not secure as malicious programs on your computer may have access to it. The file should obviously not be committed with the source code (use .gitignore !). By default the file should be named ods.apikey . You can override this default file path using the apikey_filepath=... argument. # (2) no specific python arg for api file, using 'ods.apikey' file if present. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) (3) through an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is still considered unsecure because malicious programs can access the OS environment variables. However it should be preferred over the previous methods as it avoids human mistakes (committing api key files). # (3) no specific python arg for api key, using the `ODS_APIKEY` environment variable csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) (4) through keyring , which is backed by your OS' vault ( Windows Credential Locker, macOS Keychain, etc. ). This is the most secure method available. Simply pip install keyring , and use the store_apikey_in_keyring() method once through your favorite commandline. ( done once in the commandline ) from odsclient import store_apikey_in_keyring # store our secret api key. This will prompt you for the key store_apikey_in_keyring ( platform_id = 'public' ) --- ( in your code ) # no specific python arg for api key, using the OS keyring. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) When odsclient looks for an api key and none is provided explicitly (1), a key file (2) will be looked up first, then keyring (4), and then environment variables (3). For debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" )) See API reference for details. 2. Advanced \u00b6 TODO Main features / benefits \u00b6 Simple access to ODS API to retrive a whole dataset See Also \u00b6 This library was inspired by: azmlclient Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-odsclient","title":"Home"},{"location":"#odsclient","text":"A nonofficial client for OpenDataSoft API. odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets.","title":"odsclient"},{"location":"#installing","text":"> pip install odsclient If you wish to download datasets as dataframes, you should also install pandas . This is not mandatory, though. Finally, if you plan to use api keys, we recommend that you install keyring as it will help you store the critical api keys in your operating system's password vault. > pip install keyring","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-basics","text":"","title":"1. Basics"},{"location":"#a-downloading-a-flat-dataset","text":"The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( csv_str ) yields Year Ending;World output;World population;Per capita output 2012-12-31;3.03783837;1.39292748;1.62231324 1700-12-31;0.07352168;0.05783974;0.01567288 1820-12-31;0.51654477;0.44594248;0.07028884 1913-12-31;1.48929571;0.58556427;0.89847031 If you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe df = get_whole_dataframe ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( df ) yields Year Ending World output World population Per capita output 0 1820-12-31 0.516545 0.445942 0.070289 1 1913-12-31 1.489296 0.585564 0.898470 2 2012-12-31 3.037838 1.392927 1.622313 3 1700-12-31 0.073522 0.057840 0.015673","title":"a- Downloading a \"flat\" dataset"},{"location":"#b-using-another-ods-platform","text":"By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default : https : // public . opendatasoft . com Custom `platform_id` : https : // my_ods . opendatasoft . com Custom `base_url` : https : // my_ods_server . com Note that any trailing slash is automatically removed from custom base urls.","title":"b- Using another ODS platform"},{"location":"#c-declaring-an-api-key","text":"Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are four ways that you can use to specify an api key to use for your ODS interactions, listed below from less secure (top) to most secure (bottom): (1a) through direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary way to perform quick and dirty tests, and should never be committed with the source code. # 1a. providing an api key explicitly csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" ) (1b) if your application tolerates user interaction, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: # 1b. prompting the user for an api key at runtime from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ()) (2) through a text file containing the api key. This is not secure as malicious programs on your computer may have access to it. The file should obviously not be committed with the source code (use .gitignore !). By default the file should be named ods.apikey . You can override this default file path using the apikey_filepath=... argument. # (2) no specific python arg for api file, using 'ods.apikey' file if present. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) (3) through an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is still considered unsecure because malicious programs can access the OS environment variables. However it should be preferred over the previous methods as it avoids human mistakes (committing api key files). # (3) no specific python arg for api key, using the `ODS_APIKEY` environment variable csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) (4) through keyring , which is backed by your OS' vault ( Windows Credential Locker, macOS Keychain, etc. ). This is the most secure method available. Simply pip install keyring , and use the store_apikey_in_keyring() method once through your favorite commandline. ( done once in the commandline ) from odsclient import store_apikey_in_keyring # store our secret api key. This will prompt you for the key store_apikey_in_keyring ( platform_id = 'public' ) --- ( in your code ) # no specific python arg for api key, using the OS keyring. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) When odsclient looks for an api key and none is provided explicitly (1), a key file (2) will be looked up first, then keyring (4), and then environment variables (3). For debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" )) See API reference for details.","title":"c- Declaring an API key"},{"location":"#2-advanced","text":"TODO","title":"2. Advanced"},{"location":"#main-features-benefits","text":"Simple access to ODS API to retrive a whole dataset","title":"Main features / benefits"},{"location":"#see-also","text":"This library was inspired by: azmlclient","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-odsclient","title":"Want to contribute ?"},{"location":"api_reference/","text":"API reference \u00b6 In general, help(symbol) will provide the latest up-to-date documentation. TODO","title":"API reference"},{"location":"api_reference/#api-reference","text":"In general, help(symbol) will provide the latest up-to-date documentation. TODO","title":"API reference"},{"location":"changelog/","text":"Changelog \u00b6 0.3.0 - api keys \u00b6 API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient 0.2.0 - datasets as pandas dataframes + misc. \u00b6 New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2 0.1.0 - First public version \u00b6 Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#030-api-keys","text":"API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient","title":"0.3.0 -  api keys"},{"location":"changelog/#020-datasets-as-pandas-dataframes-misc","text":"New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2","title":"0.2.0 - datasets as pandas dataframes + misc."},{"location":"changelog/#010-first-public-version","text":"Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"0.1.0 - First public version"},{"location":"long_description/","text":"python-odsclient \u00b6 A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"},{"location":"long_description/#python-odsclient","text":"A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"}]}