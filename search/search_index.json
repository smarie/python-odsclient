{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"odsclient \u00b6 A nonofficial client for OpenDataSoft API. odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets. Installing \u00b6 > pip install odsclient If you wish to download datasets as dataframes, you should also install pandas . This is not mandatory, though. Finally, if you plan to use api keys, we recommend that you install keyring as it will help you store the critical api keys in your operating system's password vault. > pip install keyring Usage \u00b6 1. Basics \u00b6 a- Downloading a \"flat\" dataset \u00b6 The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( csv_str ) yields Year Ending;World output;World population;Per capita output 2012-12-31;3.03783837;1.39292748;1.62231324 1700-12-31;0.07352168;0.05783974;0.01567288 1820-12-31;0.51654477;0.44594248;0.07028884 1913-12-31;1.48929571;0.58556427;0.89847031 If you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe df = get_whole_dataframe ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( df ) yields Year Ending World output World population Per capita output 0 1820-12-31 0.516545 0.445942 0.070289 1 1913-12-31 1.489296 0.585564 0.898470 2 2012-12-31 3.037838 1.392927 1.622313 3 1700-12-31 0.073522 0.057840 0.015673 b- Using another ODS platform \u00b6 By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default : https : // public . opendatasoft . com Custom `platform_id` : https : // my_ods . opendatasoft . com Custom `base_url` : https : // my_ods_server . com Note that any trailing slash is automatically removed from custom base urls. c- Declaring an API key \u00b6 Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are several ways that you can use to specify an api key to use for your ODS interactions. explicit, temporary \u00b6 If your need is a \"quick and dirty\" test, you can use direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary workaround, and should never be committed with the source code. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" ) interactive \u00b6 If your application tolerates user interaction through the terminal, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ()) permanent \u00b6 In all other cases, we recommend that you write apikey-agnostic code such as the one below: csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) In that case, odsclient will try several strategies to find an api key: first it will look for an ods.apikey text file containing the api key. This is not very secure as malicious programs on your computer may have access to it. The file should obviously not be committed with the source code (use .gitignore !). You can override the default file path with the apikey_filepath=... argument. then if keyring is installed ( pip install keyring ), it will check if there is an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault ( Windows Credential Locker, macOS Keychain, etc. ). This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring with the odskeys commandline utility , through the OS interface, or with the store_apikey_in_keyring / get_apikey_from_keyring / remove_apikey_from_keyring python API. finally it looks for an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is still considered unsecure because malicious programs can access the OS environment variables. However it should be preferred over the previous methods as it avoids human mistakes (committing api key files). If you wish to force usage of an api key (and prevent any ODS query to be made if none is found), you may wish to set enforce_apikey=True : csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , enforce_apikey = True # raise if no apikey is found ) If no api key is found, the above yields: odsclient . core . NoODSAPIKeyFoundError : ODS API key file not found , while it is marked as mandatory for this call ( `enforce_apikey=True` ). It should either be put in a text file at path 'ods.apikey' , or in the `ODS_APIKEY` OS environment variable , or ( recommended , most secure ) in the local `keyring` using `store_apikey_in_keyring()` . See documentation for details : https : // smarie . github . io / python - odsclient / #c-declaring-an-api-key. Note that you can generate an API key on this web page : [...]. This can be handy if you wish your users to see a quick help at first call reminding them on the various ways to provide an api key. Finally, for debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" )) See API reference for details. 2. Advanced \u00b6 TODO Main features / benefits \u00b6 Simple access to ODS API to retrive a whole dataset as text (csv) or dataframe Support for many methods to define an api key, independently of the source code: different users may use different methods (env variable, api key file, keyring) while using the same odsclient code. See Also \u00b6 This library was inspired by: azmlclient keyring Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-odsclient","title":"Home"},{"location":"#odsclient","text":"A nonofficial client for OpenDataSoft API. odsclient provides a minimal set of functions to grab a dataset or a collection of datasets from an OpenDataSoft (ODS) platform. Its initial purpose is not to cover the full set of APIs available but to get a minimum viable set of features to work easily with the datasets.","title":"odsclient"},{"location":"#installing","text":"> pip install odsclient If you wish to download datasets as dataframes, you should also install pandas . This is not mandatory, though. Finally, if you plan to use api keys, we recommend that you install keyring as it will help you store the critical api keys in your operating system's password vault. > pip install keyring","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-basics","text":"","title":"1. Basics"},{"location":"#a-downloading-a-flat-dataset","text":"The most basic thing that you can do is to download a whole dataset, similarly to what you can get when clicking on the links with your browser on a dataset's \"Export\" page : from odsclient import get_whole_dataset csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( csv_str ) yields Year Ending;World output;World population;Per capita output 2012-12-31;3.03783837;1.39292748;1.62231324 1700-12-31;0.07352168;0.05783974;0.01567288 1820-12-31;0.51654477;0.44594248;0.07028884 1913-12-31;1.48929571;0.58556427;0.89847031 If you have pandas installed, you can get the dataset directly as a dataframe: from odsclient import get_whole_dataframe df = get_whole_dataframe ( \"world-growth-since-the-industrial-revolution0\" , platform_id = 'public' ) print ( df ) yields Year Ending World output World population Per capita output 0 1820-12-31 0.516545 0.445942 0.070289 1 1913-12-31 1.489296 0.585564 0.898470 2 2012-12-31 3.037838 1.392927 1.622313 3 1700-12-31 0.073522 0.057840 0.015673","title":"a- Downloading a \"flat\" dataset"},{"location":"#b-using-another-ods-platform","text":"By default the base url used to access the OpenDataSoft platform is https://<platform_id>.opendatasoft.com , with platform_id='public' . In the methods above, you can change either the platform id with platform_id=... if your target ODS platform has a standard host name, or the entire base url with base_url=... . If you wish to check the result without executing the method, you can create an ODSClient object with the same parameters and inspect its <client>.base_url : from odsclient import ODSClient default_client = ODSClient () print ( \"Default: %s \" % default_client . base_url ) client_with_custom_pfid = ODSClient ( platform_id = 'my_ods' ) print ( \"Custom `platform_id`: %s \" % client_with_custom_pfid . base_url ) client_with_custom_baseurl = ODSClient ( base_url = \"https://my_ods_server.com/\" ) print ( \"Custom `base_url`: %s \" % client_with_custom_baseurl . base_url ) yields Default : https : // public . opendatasoft . com Custom `platform_id` : https : // my_ods . opendatasoft . com Custom `base_url` : https : // my_ods_server . com Note that any trailing slash is automatically removed from custom base urls.","title":"b- Using another ODS platform"},{"location":"#c-declaring-an-api-key","text":"Most ODS servers require some sort of authentication to access some of their contents. odsclient supports authentication through API keys (see ODS API Documentation ). There are several ways that you can use to specify an api key to use for your ODS interactions.","title":"c- Declaring an API key"},{"location":"#explicit-temporary","text":"If your need is a \"quick and dirty\" test, you can use direct apikey=... argument passing. This is the most insecure way of all, since your code will contain the key as a readable string. It should only be used as a temporary workaround, and should never be committed with the source code. csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = \"my_non_working_api_key\" )","title":"explicit, temporary"},{"location":"#interactive","text":"If your application tolerates user interaction through the terminal, you can make the above more secure by using getpass() so that users are prompted for the api key at runtime: from getpass import getpass csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , apikey = getpass ())","title":"interactive"},{"location":"#permanent","text":"In all other cases, we recommend that you write apikey-agnostic code such as the one below: csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" ) In that case, odsclient will try several strategies to find an api key: first it will look for an ods.apikey text file containing the api key. This is not very secure as malicious programs on your computer may have access to it. The file should obviously not be committed with the source code (use .gitignore !). You can override the default file path with the apikey_filepath=... argument. then if keyring is installed ( pip install keyring ), it will check if there is an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault ( Windows Credential Locker, macOS Keychain, etc. ). This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring with the odskeys commandline utility , through the OS interface, or with the store_apikey_in_keyring / get_apikey_from_keyring / remove_apikey_from_keyring python API. finally it looks for an ODS_APIKEY OS environment variable. This environment variable should either contain a single api key without quotes (e.g. aef46reohln48 ), or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' (e.g. {'public': 'key2', 'https://myods.com': 'key3', 'default': 'key1'} ). This method is still considered unsecure because malicious programs can access the OS environment variables. However it should be preferred over the previous methods as it avoids human mistakes (committing api key files). If you wish to force usage of an api key (and prevent any ODS query to be made if none is found), you may wish to set enforce_apikey=True : csv_str = get_whole_dataset ( \"world-growth-since-the-industrial-revolution0\" , enforce_apikey = True # raise if no apikey is found ) If no api key is found, the above yields: odsclient . core . NoODSAPIKeyFoundError : ODS API key file not found , while it is marked as mandatory for this call ( `enforce_apikey=True` ). It should either be put in a text file at path 'ods.apikey' , or in the `ODS_APIKEY` OS environment variable , or ( recommended , most secure ) in the local `keyring` using `store_apikey_in_keyring()` . See documentation for details : https : // smarie . github . io / python - odsclient / #c-declaring-an-api-key. Note that you can generate an API key on this web page : [...]. This can be handy if you wish your users to see a quick help at first call reminding them on the various ways to provide an api key. Finally, for debugging purposes, you may wish to use get_apikey() to check if the api key that is actually used is the one you think you have configured (through a file, env variable, or keyring): from odsclient import get_apikey print ( \"api key used: %s \" % get_apikey ( base_url = \"https://my_ods_server.com/\" )) See API reference for details.","title":"permanent"},{"location":"#2-advanced","text":"TODO","title":"2. Advanced"},{"location":"#main-features-benefits","text":"Simple access to ODS API to retrive a whole dataset as text (csv) or dataframe Support for many methods to define an api key, independently of the source code: different users may use different methods (env variable, api key file, keyring) while using the same odsclient code.","title":"Main features / benefits"},{"location":"#see-also","text":"This library was inspired by: azmlclient keyring","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-odsclient","title":"Want to contribute ?"},{"location":"api_reference/","text":"API reference \u00b6 In general, help(symbol) will provide the latest up-to-date documentation. ODSClient \u00b6 An ODSClient is a client for a given OpenDataSoft (ODS) platform. By default the target platform base url is https://<platform_id>.opendatasoft.com with platform_id='public' . One can change either customize the platform id through the platform_id constructor argument, or the whole base url with base_url . A client instance offers methods to interact with the various ODS API. Currently two high-level methods are provided: <client>.get_whole_dataset(dataset_id, ...) and <client>.get_whole_dataframe(dataset_id, ...) You can customize the requests.Session object used for the HTTPS transport using requests_session . A client is meant to use a single api key at a time, or none. You can force the api key to be mandatory using enforce_apikey=True . There are 4 ways to pass an api key, they are used in the following order: explicitly with the apikey argument through a text file containing the key. This file if present should be named ods.apikey (name can be changed using apikey_filepath , it does not make the file mandatory) if keyring is installed ( pip install keyring ), an apikey can be created as an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault (Windows Credential Locker, macOS Keychain, etc. This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring through the OS interface, with the odskeys commandline utility or with the <client>.store_apikey_in_keyring / <client>.get_apikey_from_keyring / <client>.remove_apikey_from_keyring methods. through the 'ODS_APIKEY' OS environment variable. It should either contain the key without quotes or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' For debugging purposes, you may wish to use <client>.get_apikey() to check if the api key that is actually used is the one you think you have configured through one of the above methods. ODSClient ( platform_id = 'public' , # type: str base_url = None , # type: str enforce_apikey = False , # type: bool apikey = None , # type: str apikey_filepath = 'ods.apikey' , # type: str use_keyring = True , # type: bool keyring_entries_username = KR_DEFAULT_USERNAME , # type: str requests_session = None # type: Session ): Parameters : platform_id : the ods platform id to use. This id is used to construct the base URL based on the pattern https:// .opendatasoft.com. Default is 'public' which leads to the base url https://public.opendatasoft.com base_url : an explicit base url to use instead of the one generated from platform_id enforce_apikey : an optional boolean indicating if an error should be raised if no apikey is found at all (not in the explicit argument, not in a file, environment variable, nor keyring) (default False ) apikey : an explicit api key as a string. apikey_filepath : the path that should be used to look for api keys on the file system. Such files are optional, other (safer) methods exist to pass the api key, see documentation for details. use_keyring : an optional boolean (default True ) specifying whether the keyring library should be used to lookup existing api keys. Keys should be stored using store_apikey_in_keyring() . keyring_entries_username : keyring stores secrets with a key made of a service id and a username. We use the base url for the service id, however the user name can be anything. By default we use a string: 'apikey_user'. requests_session : an optional Session object to use (from requests lib) Shortcuts \u00b6 The following shortcut functions provide the same level of functionality than ODSClient(...).<function_name>(...) . They can be handy if only one call to ODS is needed. from odsclient.shortcuts import ( get_whole_dataset , get_whole_dataframe , get_apikey , store_apikey_in_keyring , get_apikey_from_keyring , remove_apikey_from_keyring )","title":"API reference"},{"location":"api_reference/#api-reference","text":"In general, help(symbol) will provide the latest up-to-date documentation.","title":"API reference"},{"location":"api_reference/#odsclient","text":"An ODSClient is a client for a given OpenDataSoft (ODS) platform. By default the target platform base url is https://<platform_id>.opendatasoft.com with platform_id='public' . One can change either customize the platform id through the platform_id constructor argument, or the whole base url with base_url . A client instance offers methods to interact with the various ODS API. Currently two high-level methods are provided: <client>.get_whole_dataset(dataset_id, ...) and <client>.get_whole_dataframe(dataset_id, ...) You can customize the requests.Session object used for the HTTPS transport using requests_session . A client is meant to use a single api key at a time, or none. You can force the api key to be mandatory using enforce_apikey=True . There are 4 ways to pass an api key, they are used in the following order: explicitly with the apikey argument through a text file containing the key. This file if present should be named ods.apikey (name can be changed using apikey_filepath , it does not make the file mandatory) if keyring is installed ( pip install keyring ), an apikey can be created as an entry in it for service <base_url> and username 'apikey_user' . keyring leverages your OS' vault (Windows Credential Locker, macOS Keychain, etc. This is the most secure method available. You can override the default keyring entry username with the keyring_entries_username=... argument. You can easily add or remove an entry in the keyring through the OS interface, with the odskeys commandline utility or with the <client>.store_apikey_in_keyring / <client>.get_apikey_from_keyring / <client>.remove_apikey_from_keyring methods. through the 'ODS_APIKEY' OS environment variable. It should either contain the key without quotes or a dict-like structure where keys can either be platform_id , base_url , or the special fallback key 'default' For debugging purposes, you may wish to use <client>.get_apikey() to check if the api key that is actually used is the one you think you have configured through one of the above methods. ODSClient ( platform_id = 'public' , # type: str base_url = None , # type: str enforce_apikey = False , # type: bool apikey = None , # type: str apikey_filepath = 'ods.apikey' , # type: str use_keyring = True , # type: bool keyring_entries_username = KR_DEFAULT_USERNAME , # type: str requests_session = None # type: Session ): Parameters : platform_id : the ods platform id to use. This id is used to construct the base URL based on the pattern https:// .opendatasoft.com. Default is 'public' which leads to the base url https://public.opendatasoft.com base_url : an explicit base url to use instead of the one generated from platform_id enforce_apikey : an optional boolean indicating if an error should be raised if no apikey is found at all (not in the explicit argument, not in a file, environment variable, nor keyring) (default False ) apikey : an explicit api key as a string. apikey_filepath : the path that should be used to look for api keys on the file system. Such files are optional, other (safer) methods exist to pass the api key, see documentation for details. use_keyring : an optional boolean (default True ) specifying whether the keyring library should be used to lookup existing api keys. Keys should be stored using store_apikey_in_keyring() . keyring_entries_username : keyring stores secrets with a key made of a service id and a username. We use the base url for the service id, however the user name can be anything. By default we use a string: 'apikey_user'. requests_session : an optional Session object to use (from requests lib)","title":"ODSClient"},{"location":"api_reference/#shortcuts","text":"The following shortcut functions provide the same level of functionality than ODSClient(...).<function_name>(...) . They can be handy if only one call to ODS is needed. from odsclient.shortcuts import ( get_whole_dataset , get_whole_dataframe , get_apikey , store_apikey_in_keyring , get_apikey_from_keyring , remove_apikey_from_keyring )","title":"Shortcuts"},{"location":"changelog/","text":"Changelog \u00b6 0.4.0 - odskey commandline \u00b6 New odskey commandline utility to ease registration of api keys in keyring . Fixes #16 . Added a dedicated documentation page. Documentation improvements, in particular concerning api key registration. Filled the API reference documentation section 0.3.0 - api keys \u00b6 API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient 0.2.0 - datasets as pandas dataframes + misc. \u00b6 New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2 0.1.0 - First public version \u00b6 Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#040-odskey-commandline","text":"New odskey commandline utility to ease registration of api keys in keyring . Fixes #16 . Added a dedicated documentation page. Documentation improvements, in particular concerning api key registration. Filled the API reference documentation section","title":"0.4.0 - odskey commandline"},{"location":"changelog/#030-api-keys","text":"API Keys: New documentation section on api keys. Fixes #11 New methods get_apikey() and <ODSClient>.get_apikey() for debugging purposes API keys can now be provided through OS Environment Variables. Fixes #6 . New method <ODSClient>.get_apikey_from_envvar() for debugging. API keys can now be provided through keyring . Fixes #8 API key files: apikeyfile_path argument renamed apikey_filepath . Now tolerating new lines or blanks at the end of api key files. Fixes #12 . apikey_filepath now has a default value 'ods.apikey' and file check is now optional. Fixes #13 Now correctly raising an error ( InsufficientRightsForODSResourceError ) when rights are not sufficient for a resource. Fixed #7 . enforce_apikey controls if an api key is mandatory before calling (whatever way it is provided: explicit, file, env variable, or keyring). A NoODSAPIKeyFoundError is raised in case none is found. Misc: Added documentation on target platform customization. Fixes #14 Now tolerating trailing slashs at the end of custom base_url (they are removed automatically). Init: now exposing ODSClient and ODSException at the root package level. new method get_apikey() on ODSClient","title":"0.3.0 -  api keys"},{"location":"changelog/#020-datasets-as-pandas-dataframes-misc","text":"New method get_whole_dataframe to directly retrieve a dataset as a pandas dataframe. It works in streaming mode so as to correctly handle large datasets. Fixes #1 Added csv_separator option to get_whole_dataset methods. Set default value of use_labels_for_header to True to mimic what is available in the ODS website. Now parsing the ODS errors correctly to raise ODSException . Fixes #2","title":"0.2.0 - datasets as pandas dataframes + misc."},{"location":"changelog/#010-first-public-version","text":"Extracted from internal sources. Ability to download a whole dataset from any of the ODS platform using the \"download flat dataset\" API.","title":"0.1.0 - First public version"},{"location":"long_description/","text":"python-odsclient \u00b6 A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"},{"location":"long_description/#python-odsclient","text":"A nonofficial client for OpenDataSoft API. The documentation for users is available here: https://smarie.github.io/python-odsclient/ A readme for developers is available here: https://github.com/smarie/python-odsclient","title":"python-odsclient"},{"location":"odskey/","text":"odskey commandline utility \u00b6 Registering an api key in your OS' vault should not be a pain. For this, keyring comes with a handy commandline utility already. Since in odsclient we use a specific hardcoded pattern ( service_name=<base_url>, username='apikey_user', password=<apikey> ), we provide an even easier commandline for you named odskey : Usage : odskeys [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to get / set / remove api keys from the OS keyring using the ` keyring ` library . To get help on each command use : odskeys < cmd > --help Options : --help Show this message and exit. Commands : get Looks up an ODS apikey entry in the keyring . remove Removes an ODS apikey entry from the keyring . set Creates an ODS apikey entry in the keyring . For example: >>> odskeys get - b https : // myodsplatform . com / No api key registered for platform url 'https://myodsplatform.com/' >>> odskeys set - b https : // myodsplatform . com / Please enter your api key : ... >>> odskeys get - b https : // myodsplatform . com / Api key found for platform url 'https://myodsplatform.com/' : ... >>> odskey remove - b https : // myodsplatform . com / Api key removed successfully for platform url 'https://myodsplatform.com/'","title":"odskey command"},{"location":"odskey/#odskey-commandline-utility","text":"Registering an api key in your OS' vault should not be a pain. For this, keyring comes with a handy commandline utility already. Since in odsclient we use a specific hardcoded pattern ( service_name=<base_url>, username='apikey_user', password=<apikey> ), we provide an even easier commandline for you named odskey : Usage : odskeys [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to get / set / remove api keys from the OS keyring using the ` keyring ` library . To get help on each command use : odskeys < cmd > --help Options : --help Show this message and exit. Commands : get Looks up an ODS apikey entry in the keyring . remove Removes an ODS apikey entry from the keyring . set Creates an ODS apikey entry in the keyring . For example: >>> odskeys get - b https : // myodsplatform . com / No api key registered for platform url 'https://myodsplatform.com/' >>> odskeys set - b https : // myodsplatform . com / Please enter your api key : ... >>> odskeys get - b https : // myodsplatform . com / Api key found for platform url 'https://myodsplatform.com/' : ... >>> odskey remove - b https : // myodsplatform . com / Api key removed successfully for platform url 'https://myodsplatform.com/'","title":"odskey commandline utility"}]}